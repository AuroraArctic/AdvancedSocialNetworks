[["introduction.html", "Advanced Social Networks Chapter 1 Introduction 1.1 Social Network Analysis 1.2 Types of networks 1.3 Levels of analysis", " Advanced Social Networks Aurora Maria Tumminello A.Y. 2021-22 Chapter 1 Introduction 1.1 Social Network Analysis What is a social network?  It involves not only the existence of a network but also the social component (the presence of more entities interacting with each other). Is Instagram a social network?  Yes, since it is a network that links people Is the communication between students a social network?  It is since it represents the link between and among two or more students. Is a supply chain a social network?  Each role inside the supply chain is linked with the previous and the following Is the Tokyo train line a social network?  It is a network, but since it does not primarily involve people: it may link them, but mainly geographically and individually. Is our brain a social network?  It is a network, but not necessarily a social one: it is supposed to be so whenever we interact with external factors. Can words be part of a social network?  They can be if we trace what people say and link words based on the topic, the person, the place, the context etc. Remember that documents or conversations may be both the context and the node that may be linked to other documents or conversations, based on what were studying (e.g. communication between two or more individuals, events, etc). 1.1.1 Definition Networks are a way of thinking about social systems that focus our attention on the relationships among the entities that make up the system, which we call actors or nodes. These are the focus of Network Science. The nodes in a network can be almost anything, although when we talk about social networks we normally expect the nodes to be active agents rather than, say, inanimate objects. Most often, nodes are individuals, but can also be collectivities. Social Network Analysis focuses on humans and how their actions and mechanisms impact the system of interest. In a social network, we can find: Nodes or vertices, entities that are linked together and are studied; Ties or Edges, which link nodes with one another; Boundary, a delimited group where some nodes are part of it and some others dont. Its like the criteria of choosing a subset of data inside a much bigger group of nodes and links. 1.1.2 Social Network Representation A usual representation for networks is the Adjacency matrix, a square matrix that can be reciprocal (mirrored) or not (different if we swap columns and rows). Generally, self-loops do not make sense, therefore in certain situations, we can just ignore them by inserting a 0. Whenever there is a tie linking two nodes, we insert a 1. The value inside the adjacency matrix between a couple of nodes may assume values different from 0 and 1, e.g. the weight of the tie. By adding attributes (e.g. age, gender), we could modify the network representation based on a specific attribute (e.g. colour, size, shape). 1.2 Types of networks 1.2.1 Sociocentric or complete network analysis A complete or sociocentric network is such that we detain data about the mutual relationship of every couple of nodes inside the considered network. Normally, an ego network analysis belongs to such type of networks, where there is a central node and were interested in modelling all relationships entertained with that subject.  For instance, a LinkedIn ego network contains a central node and its connected contacts, which may be divided into different categories, based on the context (e.g. university, colleagues, fields of interest etc). An extension to the ego network approach is to continue iterating and expanding the network, starting from a single node and iterating over its linked nodes (Snowball sampling). 1.2.2 Directed and undirected networks  Normally, friendships is an undirected network, since it is mutual, but not all people we define as such will agree with us, since they may have other priorities people to think to. Friendship requires frequent meetings, trust, long-term relationships. Friendship is a concept that requires specific behaviours and expectations. Undirected networks are such that relationships are mutual and both parts know theyre linked. Directed networks may be represented both by straight lines with two arrows or curved lines with two lines, pointing in opposite directions. 1.2.3 Multiple network relations We could look at: different types of links (e.g. positive and negative), differentiated by the link or node colour; how relationships evolve among the same nodes; 1.2.4 Weighted networks These types of networks have weights or values of the edge, where nodes or links may have different importances from each other. 1.2.5 Two-mode or Bipartite networks In two-mode networks, there are two types of nodes, where each node is associated with the other type. Its an undirect way to look at connections between people that may be unconscious. The two-mode network can be projected to a one-mode network, based on their common connections to the other type node. 1.3 Levels of analysis Group Level We look at the entire network, not focusing on a specific node, looking at communities or how far some nodes are from each other.  Do well-connected networks tend to diffuse ideas faster? Individual Level Focusing on a single node, we look at its connections and position inside the network (e.g. centralisation, density). Most node-level network properties are aggregations of dyad-level measurements, as when we count the number of ties that a node has.  Do actors with more friends tend to have stronger immune systems? Dyadic Level We study pairwise relations between actors and ask research questions. The dyad level is the fundamental unit of network data collection, and is the unit with the greatest frequency.  Do pairs of actors with business ties tend to develop affective ties? "],["basic-measures.html", "Chapter 2 Basic Measures 2.1 Degree centrality 2.2 Density and average degree 2.3 Degree-centralization", " Chapter 2 Basic Measures With respect to the considered level of analysis, there are some measures that can be computed for each of them. 2.1 Degree centrality 2.1.1 Directed Network Consider a direct network, whose adjacency matrix is not symmetric. The In degree indicates the popularity of a node, while the out degree indicates its connection with other nodes. This degree centrality can be normalized to get the proportion of outcoming/incoming connections for each node, by dividing the in/outdegree by the total number of people remaining (\\(n-1\\), or the maximum possible connections that a node could have): 2.1.2 Undirected Network In this case, the in-degree and the out-degree are the same, since we do not distinguish the type of connections. It can be considered as a double arrow pointing to both sides. 2.2 Density and average degree 2.2.1 Directed Network \\[ Density = \\frac{\\text{Number of ties}}{\\text{Number of possible ties}} =\\frac{\\text{Number of ties}}{n(n-1)} \\] The number of possible ties, without considering self-loops, equals \\(n(n-1)\\). The number of ties equals the sum of the adjacency matrix.  For instance, by considering the Friends network, we can say that there are 11 ties and 6 people, so the density equals \\(D = 11/(6*5) = 11/30 = 0.367\\). This number indicates the percentage of direct connections between nodes inside the network. 2.2.2 Undirected Network In this case, the number of ties can be obtained by doubling the sum of half-matrix, since it is symmetric. The number of possible ties in this case is divided by two, since it is symmetrical and \\((a,b) = (b,a)\\): \\[ Density = \\frac{\\text{Number of ties}}{\\text{Number of possible ties}} =\\frac{\\text{Number of ties}}{n(n-1)/2} \\]  In the Simpsons example, the density equals \\(D = 18/(10*9/2) = 18/45 = 0.4\\) 2.2.3 Average Degree Related to directed network, the average indegree equals the sum of the in-degree or out-degree over the total number of nodes inside the network:  In the Friends example, the average in-degree is \\(11/6 = 1.833\\), while the out-degree is \\(11/6 = 1.833\\). By considering the normalized degree, we discover that it equals the density of the network, because we initially divide by the maximum connections possible (\\(n(n-1)\\)), and then we divide everything by the total number of nodes (\\(n\\)), while the normalized degree is computed by dividing the degree by \\(n-1\\). 2.2.4 Importance of density The Density is useful whenever we need to compare networks, both of the same or different sizes. In particular, the bigger, the more important density becomes to evaluate its cohesiveness. Notice that a bigger network makes it harder to have a bigger density than a smaller one. Comparing the density of networks of different sizes can be challenging. It would be better to compare average degrees but notice that by increasing the network size and the average degree, the density reduces. 2.3 Degree-centralization Centralization is a question about how central some nodes are compared to other nodes, it is a characteristic of the network itself. Its related to the distribution of the centrality inside the network, while centrality is more related to the individual sphere of the nodes.  The least centralized network is a ring structure, where everyone is connected to the previous and following node (in this case the centralisation is 0). The most centralized network is an ego one, where one node is connected to everyone and no one else is connected to nodes different from the ego (in this case the centralisation measure is far from 0). Centralisation may indicate the status of some nodes inside a network. 2.3.1 Undirected Network By taking the maximum degree inside the network, for each node, we subtract its degree to this maximum, in order to get its centralisation. The centralisation for the degree is then obtained by summing all these centralisations.  Note that the maximum number of connections we could build in a centralized network is \\(n-1\\). In a decentralized network, if everybody has the same number of connections, the centralisation will always be 0, since the maximum will be the same for every node. By considering the range between the least and the most centralized (\\(0-12\\)), the centralisation can be finally computed by dividing the centralisation for the degree by the maximum centralisation value possible.  In the example above, it would be \\(5/12\\). The general formula for the centralisation is the following: \\[ Centralisation = \\frac{\\sum (\\max-degree_i)}{(n-1)(n-2)} \\] 2.3.2 Directed Network In this case, we detain both in and out-degree centralisation. \\[ In-Centralisation = \\frac{\\sum (\\max_{in}-\\text{in-degree}_i)}{(n-1)^2} \\] \\[ Out-Centralisation = \\frac{\\sum (\\max_{out}-\\text{out-degree}_i)}{(n-1)^2} \\]  Still, if we consider the Friends network, we notice that related to the out-degree centralisation, the network is kind of centralized on Rachel, which is talkative with everybody: \\[ Out-C = \\frac{(5-1)+(5-0)+(5-1)+(5-5)+(5-3)+(5-1)}{5^2} = \\frac{19}{25} = 0.76 \\]  Related to the in-degree instead, the network is decentralized. By thinking about how is more popular than other characters, nobody is the true main star of the show, despite Ross is quite less cited by other people. This means that everybody is as popular as everybody else. It is not perfect yet actually, because of Ross. \\[ In-C = \\frac{(2-1)+5*(2-2)}{5^2} = \\frac{1}{25} = 0.04 \\] 2.3.3 Experiment How fast a group could make decisions together? Each subject was given a card, with 5 symbols from a set of 6. Each symbol appeared on 4 of the 5 cards, except for one. The group was asked to find the common symbol in the shortest time possible. The subjects communicated by writing messages that could be passed through slots in the walls of the cubicles. Four structures were proposed: ring structure: no consistent pattern of organisations, since subjects sent messages only when receiving or work out the answer themselves; straight line: most of the time the answer was sent out by the individual in the most central position; cross figure: the peripheral sent information to the center, where answered arrived and were sent out. t-figure: the most central figure got all the information and sent the answer. Slower than the cross, but still working. The most efficient structure is the T-figure. During the experiment, the person in the middle in the cross figure didnt understand the experiment at all, therefore the information was useless. Its the classical structure with the team leader that commands the actions to take. It actually depends on the leadership ability of the central node, otherwise there is no learning. The efficiency is given by the velocity and availability to communicate. Simple things benefit from the decentralized problems, whereas complex problems benefit from the centralized option, since the divide et impera organisation makes everything more efficient. Evaluation: satisfaction: ring structure; less errors: T-figure; like: ring-structure; at least one error: cross and T-figure Aim: find a balance between efficiency and satisfaction. "],["cohesion-measures.html", "Chapter 3 Cohesion measures 3.1 Direct connections 3.2 Components 3.3 Geodesic 3.4 Exercises", " Chapter 3 Cohesion measures How can we compute whether a network is cohesive or not? When we talk about cohesion, were focusing on the group level of analysis. 3.1 Direct connections 3.1.1 Density What proportion of ties is present? What proportion of pairs of nodes is directly connected? Its the simplest measure of cohesion, the number of ties in the network, expressed as a proportion of the number possible. Given an undirected network, its number of possible ties is \\(n(n-1)/2\\): \\[ Density = \\frac{\\text{Number of ties}}{\\text{Number of possible ties}} \\]  For instance, in this TBBT network, the density is 1/4 (7 actual ties, with 8 nodes, so 87/2 = 28 possible ties).* 3.1.2 Average Degree What is the average number of connections for nodes?  The average degree of connections for nodes is: (1+2+1+1+2+2+2+2)/8 = 1.625  Remember that density does not tell us how these ties are distributed among the nodes. 3.2 Components How many different groups of nodes exist that cannot reach each other (directly or indirectly)? A component is a maximum set where everyone is connected with each other.  In the Big Bang Theory set, the components are two, as shown in the image above. Imagine that everyone has a piece of information that needs to be propagated. The more components, the less information everyone is reaching and the worse it is. The number of components of a network goes from 1 to the total number of nodes \\(n\\). We should think of components as a way to spread creativity inside the network. All groups hold unique ideas and being one component allows for exposure to more ideas. 3.2.1 Component ratio The component ratio is given by the number of components minus 1, over the maximum number of components minus 1: \\[ CR = \\frac{c-1}{n-1} \\]  In TBBT example, the component ratio would be \\((2-1)/(8-1) = 1/7\\). 1 means that all nodes are isolated, while 0 means theres one single component. Notice that the component ratio does not tell us anything about the distribution of these components.  The size of the largest component is a function of the network size, but it doesnt tell us anything about the smaller components. 3.2.2 Connectedness and fragmentation  The two networks below are similar to the largest components, but not the same. What proportion of pairs of nodes can reach each other directly or indirectly?  In the first example, Amy, Bernadette and Stuart reach each other \\((3*2)\\), whereas the others 5 are connected among them \\((5*4)\\) , so \\((3*2+5*4)/(8*7) = 0.464\\) . In the second example, since the first three nodes do not reach each other, we have \\((0+0+0+5*4)/(8*7) = 0.357\\). This proportion is called connectedness, while its complement is called fragmentation (\\(fragmentation = 1-connectedness\\)). Notice that these measures do not inform about how long it takes to reach other nodes inside the same component: \\[ Connectedness = \\frac{\\sum_{i = \\text{number of nodes in ith component}} i(i-1)}{n(n-1)} \\] 3.3 Geodesic 3.3.1 Compactness and breadth We can study the average distance between two nodes, based on cohesion measures. Remember that longer distances reduce information sharing since it is quite expensive to reach them. The lower the average distance, the easier it is to reach other nodes and therefore the more the network is cohesive and preferrable.  For instance, the distance from Howard to Leonard is 2. If we want to compute the average distance between any couple of nodes inside the TBBT network, we need to consider disconnected nodes with inf distance, as shown in the geodesic distance matrix, which shows the minimum number of links to pass in order to reach a specific node. # # Geodesic distance: # [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] # [1,] 0 1 1 2 3 Inf Inf Inf # [2,] 1 0 1 2 3 Inf Inf Inf # [3,] 1 1 0 1 2 Inf Inf Inf # [4,] 2 2 1 0 1 Inf Inf Inf # [5,] 3 3 2 1 0 Inf Inf Inf # [6,] Inf Inf Inf Inf Inf 0 1 1 # [7,] Inf Inf Inf Inf Inf 1 0 2 # [8,] Inf Inf Inf Inf Inf 1 2 0 By convention, Inf is expressed as 0 if we consider \\(1/\\text{geodesic distance}\\), also called reciprocal distance: # # 1/geodesic distance # [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] # [1,] Inf 1.0000000 1.0 0.5 0.3333333 0 0.0 0.0 # [2,] 1.0000000 Inf 1.0 0.5 0.3333333 0 0.0 0.0 # [3,] 1.0000000 1.0000000 Inf 1.0 0.5000000 0 0.0 0.0 # [4,] 0.5000000 0.5000000 1.0 Inf 1.0000000 0 0.0 0.0 # [5,] 0.3333333 0.3333333 0.5 1.0 Inf 0 0.0 0.0 # [6,] 0.0000000 0.0000000 0.0 0.0 0.0000000 Inf 1.0 1.0 # [7,] 0.0000000 0.0000000 0.0 0.0 0.0000000 1 Inf 0.5 # [8,] 0.0000000 0.0000000 0.0 0.0 0.0000000 1 0.5 Inf Excluding the diagonal, the compactness is expressed as the average of the reciprocal distance. Breadth is the complement of compactness (1-compactness). 3.3.2 K-step approach The k-step approach tries to find what proportion of pairs of nodes can reach each other in k steps. It is a distance-based measure of cohesion.  For instance, given the geodesic distance, what is the proportion of nodes that can reach each other in less than 3 steps? # Geodesic distance: # [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] # [1,] 0 1 1 2 3 Inf Inf Inf # [2,] 1 0 1 2 3 Inf Inf Inf # [3,] 1 1 0 1 2 Inf Inf Inf # [4,] 2 2 1 0 1 Inf Inf Inf # [5,] 3 3 2 1 0 Inf Inf Inf # [6,] Inf Inf Inf Inf Inf 0 1 1 # [7,] Inf Inf Inf Inf Inf 1 0 2 # [8,] Inf Inf Inf Inf Inf 1 2 0 # # Less than 3 steps # 0.3928571 = (11)/(8*7/2) = 11/28 3.4 Exercises 3.4.1 Comment on the results obtained Density Density assumes the same value for all the networks. Connectedness In networks composed of one single component, obviously, everyone is connected with everyone else, promoting easy information sharing. Within some components, for instance in network 6 theres a completely connected component between Stuart, Sheldon, Penny and Leonard, which reduces the cost of information sharing. Compactness The difference between the two networks with one component, we notice that in terms of compactness the fourth takes fewer steps to reach every other node in the network. If we consider the 2 steps reach in fact, we notice that it is higher in network 4 than in 3. Considering the money to spend on the process of information sharing. Which network would be more helpful? In this case, components play a key role in terms of reachability. So networks as 4 and 3 are preferable. In terms of information sharing and studying for an exam to gain a certain competence? Direct connections are more helpful than greater components. Its hard to transfer knowledge from multiple people to one. When thinking to find a resource online? Its probably better to request it from multiple people that suggest more courses as possible. "],["centrality.html", "Chapter 4 Centrality 4.1 Degree Centrality 4.2 Closeness Centrality 4.3 Betweenness Centrality 4.4 Resource Dependence Theory 4.5 Bonacich Beta Centrality", " Chapter 4 Centrality 4.1 Degree Centrality The aim of degree centrality is to compute whos the node that reaches as many people as possible in one single step. 4.2 Closeness Centrality How to discover whos the most central node in the network? If you have information that you want everyone in the group to have, and you can only give it to one person in the group, who would you give it to? Every extra step needed to reach someone decreases accuracy and increases costs. A geodesic is the shortest path between two actors. There may be more than one shortest path connecting any two vertices. 4.2.1 Freemans closeness centrality We start with a person that has the information and in one step we count how many of them have been reached starting from him/her. Consider the following example where we start from Marge and try to reach for every other node in the network. Some nodes may be equivalent, especially when theyre interchangeable. By considering the final table obtained by counting the necessary steps to reach any other node starting from a specific one, we obtain the table aside. We can notice how Homer and Krusty are equivalent since they reach in the same number of steps all the nodes in the network, but Lisa and Bart minimize the cost with equivalent connections. On the other side, Cecil maximizes the path cost to reach all the other nodes. These values can be normalized by computing the reciprocal, multiply for the minimum value possible: \\(n-1\\), which equals 9 in the Simpsons example. The lower the closeness, the less central a node is; the higher the closeness, the more central a node. This can be computed through the following command on R: library(sna) ## Caricamento del pacchetto richiesto: statnet.common ## ## Caricamento pacchetto: &#39;statnet.common&#39; ## I seguenti oggetti sono mascherati da &#39;package:base&#39;: ## ## attr, order ## Caricamento del pacchetto richiesto: network ## ## &#39;network&#39; 1.17.1 (2021-06-12), part of the Statnet Project ## * &#39;news(package=&quot;network&quot;)&#39; for changes since last version ## * &#39;citation(&quot;network&quot;)&#39; for citation information ## * &#39;https://statnet.org&#39; for help, support, and other information ## sna: Tools for Social Network Analysis ## Version 2.6 created on 2020-10-5. ## copyright (c) 2005, Carter T. Butts, University of California-Irvine ## For citation information, type citation(&quot;sna&quot;). ## Type help(package=&quot;sna&quot;) to get started. Simpsons_n = as.network(as.matrix(read.csv(&quot;Datasets/simpsons.csv&quot;, row.names=1, stringsAsFactors = F)), directed=F) sna::closeness(Simpsons_n, gmode=&quot;graph&quot;) ## [1] 0.5294118 0.5294118 0.6000000 0.5000000 0.5000000 0.6428571 0.6428571 ## [8] 0.6000000 0.4285714 0.3103448 What happens if we add multiple components? The other nodes will never be reached, therefore it is counted as Inf, but it shouldnt be summed up to other steps, or every node will be equivalently central. Considering the code, we would obtain: Simpsons_n2&lt;-Simpsons_n Simpsons_n2[9,10]&lt;-0 Simpsons_n2[10,9]&lt;-0 sna::closeness(Simpsons_n2, gmode=&quot;graph&quot;) ## [1] 0 0 0 0 0 0 0 0 0 0 # [1] 0 0 0 0 0 0 0 0 0 0 Whoever we choose, will never reach everyone. But suppose we set a maximum cost for reaching a node, despite theyre not connected and cannot reach each other. In this case, we can normalize as before and choose the highest value, remembering that still we cannot reach everyone. 4.2.2 Reciprocal closeness centrality To overcome the limitation of the previous centrality measure whenever we have more components, we change the aim. If you have information that you want as many people as possible in the group to have, and you can only give it to one person in the group, who would you give it to? By using the reciprocal distances (1/geodesic distance), then unreachable nodes value \\(1/\\infty\\), therefore 0. Considering this centrality measure, the most central node is Homer, since there is not a single component anymore, but two separated ones and Lisa/Bart took advantage of the fact that they could have reached both sides of the network, while now they cant. Simpsons_n2&lt;-Simpsons_n Simpsons_n2[9,10]&lt;-0 # Simpsons_n2[10,9]&lt;-0 sna::closeness(Simpsons_n2, gmode=&quot;graph&quot;, cmode=&quot;suminvundir&quot;) ## [1] 0.6481481 0.6481481 0.7592593 0.5925926 0.5925926 0.7222222 0.7222222 ## [8] 0.6111111 0.4074074 0.0000000 By changing the network structure, separating both Bob and Cecil, we get different interpretations of this centrality measure: Bob reduces its closeness, while Cecil augments it for being connected to someone. Other nodes increase their closeness since theyre more connected to the people inside their component. Simpsons_n3&lt;-Simpsons_n Simpsons_n3[8,9]&lt;-0 #Simpsons_n3[9,8]&lt;-0 sna::closeness(Simpsons_n3, gmode=&quot;graph&quot;, cmode=&quot;suminvundir&quot;) ## [1] 0.6111111 0.6111111 0.7222222 0.5555556 0.5555556 0.6666667 0.6666667 ## [8] 0.5000000 0.1111111 0.1111111 4.3 Betweenness Centrality Who is important as an in-between person to transfer information? This centrality is about the gatekeepers between two nodes that gain power from this situation. The more nodes in between, the more extra points are earned to connect other nodes. Consider Lisa as the in-between person were interested in. Shes important whenever she connects all nodes except for Abe to the line composed of Krusty, Bob and Cecil. When there are alternative paths to get from A to B, then the importance of every node in-between diminishes, because it is split among all in-between nodes (alternatives). For non-unique shortest paths, each actor gets \\(1/\\text{number of shortest paths}\\). Related to the Simpsons example, we can compute the betweenness centrality for each character and then find out that Krusty has the highest betweenness centrality since without him there are no alternative paths for reaching Bob and Cecil and vice-versa.  In the first example, there are these three nodes that can be used as alternatives. In the second example, there are three paths from A to B, which comprehend in between nodes C, D, E, F and G. sna::betweenness(Simpsons_n, gmode=&quot;graph&quot;) ## [1] 0.8333333 0.8333333 3.6666667 0.0000000 0.0000000 8.3333333 ## [7] 8.3333333 14.0000000 8.0000000 0.0000000 #[1] 0.8333333 0.8333333 3.66666667 0.0000000 0.0000000 #[6] 8.3333333 8.3333333 14.0000000 8.0000000 0.0000000 The minimum value we can get is 0, while the maximum is the number of possible links we could have in a network (\\(n(n-1)/2\\)), which equals \\((9*8)/2 = 36\\) in the Simpsons case. Normally, betweenness centrality is normalized according to the maximum value possible. In the case of Krusty, its betweenness centrality is \\(14/36 = 0.389\\) which means that hes between two nodes shortest path nearly 39% of the time. 4.4 Resource Dependence Theory According to Emersons power from a dependency framework work, A has power over B to the extent that B is dependent on A: (1) B needs specific resources from A, therefore can exert power over it until B needs the resources; (2) there are no alternatives for B to A: the power disappears by increasing the number of alternatives. According to Brass work about being in the right place, the dependent variable is influence. He looked at closeness and betweenness centrality when focusing on newspaper publishing company employees. In particular, closeness centrality is expressed as access or minimal distance between a focal actor and all other persons; betweenness centrality is expressed as control or the relative extent to which a focal actor falls on the shortest path between any two other persons. Also, there were three levels of analysis: workgroup, department and organization. According to the result: when it comes to a workgroup, access to the whole resources is important. When it came to controlling, it is not important; control instead is more pivotal at the organizational level, whereas access to resources has no importance since it is strict. 4.5 Bonacich Beta Centrality It is similar to closeness centrality because we worry about near connections with people that have a lot of connections. Beta centrality not only refers to geodesic, as closeness does but also to all possible walks. Flowing of information can be repeated and changed, such as attitude and beliefs. Whenever we reinforce the same links over and over again, we may risk entering inside an echo chamber, so the repetition of connections (back and forward) may affect the centrality of a node. Closeness is a binary situation of connection, while Bonacich Beta Centrality is more on continuity and consistent connection between nodes. "],["blocks.html", "Chapter 5 Blocks 5.1 Equations 5.2 Theorems and proofs 5.3 Callout blocks", " Chapter 5 Blocks 5.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{5.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (5.1). 5.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 5.1. Theorem 5.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 5.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 6 Sharing your book 6.1 Publishing 6.2 404 pages 6.3 Metadata for sharing", " Chapter 6 Sharing your book 6.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 6.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If youd like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 6.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your books title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your books source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapters source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["visualization.html", "Chapter 7 Visualization 7.1 Prerequisites 7.2 Modifying the layout on KHF network 7.3 Layout based on 2 continuous attributes 7.4 Layout where points are grouped based on nominal attribute 7.5 Geography - International trade among countries in 1928 7.6 Multidimensional scaling 7.7 KamadaKawai and FR layout KHFS 7.8 Tie strength on Scientists collaborations 7.9 Directed networks", " Chapter 7 Visualization 7.1 Prerequisites Before starting to visualize networks, it is necessary to install the package for Social Network Analysis, called sna: # install.packages(&quot;sna&quot;) library(sna) 7.2 Modifying the layout on KHF network 7.2.1 Random layout Lets plot the nodes randomly in the two-dimensional space, with the KHF dataset. Notice that in order to build a network, we need an adjacency matrix, thats why the csv is converted into a matrix structure. Then, in order to symmetrize it and make it undirected, it is multiplied for its transpose, to make a self-multiplication, in order to get an undirected network from a directed one (remember that if theres a link going in both sides, we can insert an undirected link between these two vertices). For instance, consider the following directed adjacency matrix: \\[ \\left( \\begin{array}{ccc} 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{array} \\right) \\] By computing its transpose and perform the self multiplication we obtain the undirected network (symmetric and with links only whenever the link goes on both sides in the original directed network): \\[ \\left( \\begin{array}{ccc} 0 &amp; 1 &amp; 1 \\\\ 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{array} \\right) \\times \\left( \\begin{array}{ccc} 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 1 \\end{array} \\right) = \\left( \\begin{array}{ccc} 0 &amp; 1 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{array} \\right) \\] In the end it is turned into a network object. # 1. Read in the friendship network for Krackhardt&#39;s high-tech managers: KHF &lt;- as.matrix(read.csv(&quot;./Datasets/Krackhardt_HighTech_Friendship.csv&quot;, stringsAsFactors=FALSE, row.names=1)) # 2. Symmetrize the matrix using the minimum approach, so a friendship tie # is only considered if both agree they are friends: KHFS &lt;- KHF*t(KHF) # 3. Turn this into a &quot;network&quot; object: KHFSn&lt;-as.network(KHFS, directed=F) To save the plot as a tiff file (in the default folder) use the tiff() function, which opens an image file, and finish with dev.off(), which closes the image file for changes. # 4. Create and save visualization # tiff(file=&quot;images/Fig_01_KHFS_Random.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) # Margin deletion gplot(KHFSn, gmode=&quot;graph&quot;, # undirected network mode=&quot;random&quot;, # random plotting of nodes jitter=F, # do not allow nodes to be &quot;jittered&quot; edge.col=&quot;grey70&quot;, # set color of ties vertex.col=&quot;cornflowerblue&quot;, # set color of nodes displaylabels=T, # indicate that labels should be included label.pos=1, # indicate that labels should be given below points label.cex=.7) # indicate the size of the labels (1 is default) # dev.off() gmode=\"graph\" is used for undirected networks, while gmode=\"digraph is used for directed networks. If the input graph is undirected but the selected gmode is for directed networks, then arrows on both sides will be visualized. Also, most of the times the margin deletion is not necessary. The use of random position may be risky because of links overlapping and too close nodes. 7.2.2 Circle Layout For a circle layout, it is necessary to change mode into \"cirlce\". # tiff(file=&quot;images/Fig_02_KHFS_Circle.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(KHFSn, gmode=&quot;digraph&quot;, mode=&quot;circle&quot;, jitter=F, edge.col=&quot;grey70&quot;, vertex.col=&quot;cornflowerblue&quot;, displaylabels=T, label.pos=1, label.cex=.7) # dev.off() 7.2.3 FR Layout # tiff(file=&quot;images/Fig_03_KHFS_FR.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(KHFSn, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=FALSE, #ties edge.col=&quot;grey80&quot;, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) # dev.off() 7.2.4 KHA Network The following network is more dense than the previous. # Read in the advice network for Krackhardt&#39;s high-tech managers: KHA&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Advice.csv&quot;, stringsAsFactors=FALSE, row.names=1)) # Symmetrize the matrix using the minimum approach, so an advice tie # is only considered if both ask each other for advice: KHAS&lt;-KHA*t(KHA) # Turn this into a &quot;network&quot; object: KHASn&lt;-as.network(KHAS, directed=F) #tiff(file=&quot;images/Fig_04_KHAS_FR.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(KHASn, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=F, #ties edge.col=&quot;grey70&quot;, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) #dev.off() We could also build a function to plot a network: plot_network = function(network){ gplot(network, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=F, #ties edge.col=&quot;grey70&quot;, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) } # Example of use plot_network(KHASn) 7.3 Layout based on 2 continuous attributes # Read data and convert it into matrix WPJ &lt;- as.matrix(read.csv(&quot;Datasets/Wolfe_Primates_JointPresence.csv&quot;, stringsAsFactors=FALSE, row.names=1)) # Read attributes WPAttr &lt;- read.csv(&quot;Datasets/Wolfe_Primates_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1) # Rescale attributes so they range from 0 to 1 WP.AGE &lt;- (WPAttr$AGE-min(WPAttr$AGE))/(max(WPAttr$AGE)-min(WPAttr$AGE)) WP.RANK &lt;- (max(WPAttr$RANK)-WPAttr$RANK)/(max(WPAttr$RANK)-min(WPAttr$RANK)) # Turn the 2 continuous variables into coordinates WPCOORD &lt;- matrix(c(WP.AGE,WP.RANK), dim(WPJ)[1],2) # Consider drawing only &quot;relatively strong&quot; ties WPJ6W &lt;- (WPJ&gt;5)*(WPJ-5) # Only consider a tie in tie matrix, but only if major than 5 and then rescale it by removing 5 In the next step, were going to make darker ties for those links where primates interacted more with each other (from grey40 to grey90). # Create colors (greyscales) for ties WPJ6W.Color&lt;-WPJ6W col.grey&lt;-colorRampPalette(c(&quot;grey90&quot;, &quot;grey40&quot;)) col.greyN&lt;-col.grey(max(WPJ6W)+1) for (k in (1:max(WPJ6W))) { WPJ6W.Color[WPJ6W==k]&lt;-col.greyN[k+1] } Now lets start drawing, remembering that: coordinates of nodes are given by their rank and their age (attributes): coord=WPCOORD; the edge color is given by the mapping color based on their number of links: edge.col=WPJ6W.Color; the color of the vertex indicates the gender of the primate (white for females, black for males): vertex.col=(WPAttr$GENDER==\"male\")*9; the added arrows allows us to visualize the cartesian plan. # tiff(file=&quot;images/Fig_05_WPJ_coordAgeRank6W.tiff&quot;, width=5, height=6, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(WPJ6W*1.1, gmode=&quot;digraph&quot;, #layout coord=WPCOORD, # using the coordinates to place primates jitter=F, #ties edge.col=WPJ6W.Color, edge.lwd=.3, #nodes vertex.col=(WPAttr$GENDER==&quot;male&quot;)*9, vertex.cex=0.5, #labels displaylabels=T, label.pos=1, label.cex=.7, arrowhead.cex = 0.4) # Add arrows arrows(-.1, -.1, 1.1, -.1, length = 0.1) arrows(-.1, -.1, -.1, 1.1, length = 0.1) text(-.1, 1.1, labels=&quot;Rank&quot;, cex=0.8, pos=4) text(1.1,-.1, labels=&quot;Age&quot;, cex=0.8, pos=3) # dev.off() 7.4 Layout where points are grouped based on nominal attribute First of all, were going to import the datasets and convert them into networks as usual: # 1. Convert datasets into networks ## Convert the KHA dataset into a network KHA&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Advice.csv&quot;, stringsAsFactors=FALSE, row.names=1)) KHAS&lt;-KHA*t(KHA) KHASn&lt;-as.network(KHAS, directed=F) ## Convert the KHF dataset into a network KHF&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Friendship.csv&quot;, stringsAsFactors=FALSE, row.names=1)) KHFS&lt;-KHF*t(KHF) KHFSn&lt;-as.network(KHFS, directed=F) Then, we can create a network with ties within departments to define positions. By importing the KHA dataset and maintaining its attribute, we will maintain the departments and convert them to matrix. In the end, we maintain only those links where two subjects belong to the same department (DEPS==t(DEPS)). # 2. Create a network with ties within department to define positions KHAttr&lt;-read.csv(&quot;Datasets/Krackhardt_HighTech_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1) DEPS&lt;-matrix(KHAttr$DEPT,nrow(KHA),nrow(KHA)) DEPSIM&lt;-DEPS==t(DEPS) We can get nodes coordinates by plotting them based on their department similarity. Coords may change from an execution to another, but groupings will be the same. In this way, we will place similar nodes next to each other. # 3. Get coordinates DEP_COORD&lt;-gplot(DEPSIM, displaylabels=T) # 4. Draw the friendship network using the coordinates got from nominal friendship # tiff(file=&quot;images/Fig_06_KHFS_Department1.tiff&quot;, width=5, height=7, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(KHFSn, gmode=&quot;graph&quot;, #layout coord=DEP_COORD, jitter=F, #ties edge.col=&quot;grey50&quot;, edge.lwd=.7, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) # dev.off() # tiff(file=&quot;images/Fig_06_KHAS_Department1.tiff&quot;, width=5, height=7, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(KHASn, gmode=&quot;graph&quot;, #layout coord=DEP_COORD, jitter=F, #ties edge.col=&quot;grey50&quot;, edge.lwd=.7, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) # dev.off() 7.5 Geography - International trade among countries in 1928 In this case, nodes are positioned based on the geographic location of their capitals. Canada and the US have been slightly moved to the West to make the trade between European countries more visible. # 1. Dataset conversion into network STE&lt;-as.matrix(read.csv(&quot;Datasets/Savage_TransactionFlows_ExportsPerc.csv&quot;, stringsAsFactors=FALSE, row.names=1)) STAttr&lt;-read.csv(&quot;Datasets/Savage_TransactionFlows_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1) # 2. Consider Latitude and Longitude LA&lt;-STAttr$Latitude LO&lt;-STAttr$Longitude # 3. Move Canada and US to the west LO[2:3]&lt;-LO[2:3]+40 # 4. Symmetrized using product STES&lt;-(STE*t(STE)) ## To plot only stronger trades (more than 19 trades) STESGT20&lt;-round(((STES&gt;19)*(STES-19))^.5) # 5. Create colors (greyscale) for ties STESGT20.Color&lt;-STESGT20 col.grey&lt;-colorRampPalette(c(&quot;grey80&quot;, &quot;grey40&quot;)) col.greyN&lt;-col.grey(max(STESGT20)+1) for (k in (1:max(STESGT20))) { STESGT20.Color[STESGT20==k]&lt;-col.greyN[k+1] } # 6. Visualizing the map #tiff(file=&quot;images/Fig_07_STE_Trade1928_Geogr.tiff&quot;, width=8, height=4, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(STESGT20, gmode=&quot;graph&quot;, coord=cbind(LO,LA), # Using geographical coordinates to map cities jitter=F, edge.col=STESGT20.Color, edge.lwd=0.4, vertex.col=&quot;grey90&quot;, vertex.cex=0.3, displaylabels=T, label.cex=.5) #dev.off() 7.6 Multidimensional scaling 7.6.1 MDS on Primates We can apply the MDS in order to better plot nodes inside the network, by using the default function in R cmdscale(). # 1. Rescale values using MDS WPJS&lt;-log(WPJ+1) WPJ_CoordMDS&lt;-cmdscale(max(WPJS)*1.001-WPJS, eig=TRUE, k = 2) # 2. Consider drawing only &quot;relatively strong&quot; ties WPJ6W&lt;-(WPJ&gt;5)*(WPJ-5) # 3. Create color for ties WPJ6W.Color&lt;-WPJ6W col.grey&lt;-colorRampPalette(c(&quot;grey80&quot;, &quot;grey30&quot;)) col.greyN&lt;-col.grey(max(WPJ6W)+1) for (k in (1:max(WPJ6W))) { WPJ6W.Color[WPJ6W==k]&lt;-col.greyN[k+1] } # 4. Draw # tiff(file=&quot;images/Fig_08_WPJ6W_mds.tiff&quot;, width=6, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(WPJ6W*1.1, gmode=&quot;graph&quot;, #layout coord=WPJ_CoordMDS$points, jitter=F, edge.col=WPJ6W.Color, edge.lwd=0.5, #nodes vertex.col=ifelse(WPAttr$GENDER==&quot;male&quot;,4,2), vertex.cex=0.8, #labels displaylabels=T, label.pos=1, label.cex=.7) # dev.off() 7.6.2 MDS on valued trade STE&lt;-as.matrix(read.csv(&quot;Datasets/Savage_TransactionFlows_ExportsPerc.csv&quot;, stringsAsFactors=FALSE, row.names=1)) # Symmetrized using product STES&lt;-(STE*t(STE)) # To plot only stronger trade STESGT20&lt;-round(((STES&gt;19)*(STES-19))^.5) # Create colors (greyscale) for ties STESGT20.Color&lt;-STESGT20 col.grey&lt;-colorRampPalette(c(&quot;grey80&quot;, &quot;grey40&quot;)) col.greyN&lt;-col.grey(max(STESGT20)+1) for (k in (1:max(STESGT20))) { STESGT20.Color[STESGT20==k]&lt;-col.greyN[k+1] } STESGT20_Coord&lt;-cmdscale((max(STE)*1.002-STE)^2, eig=TRUE, k = 2) #STESGT20_Coord&lt;-cmdscale(STE-STE, eig=TRUE, k = 2) #tiff(file=&quot;images/Fig_08_STESGT20_mds.tiff&quot;, width=6, height=5, units=&quot;in&quot;, res=900) par(mar=c(1,1,1,1)) gplot(STESGT20, gmode=&quot;graph&quot;, #layout coord=STESGT20_Coord$points, jitter=F, #ties edge.col=STESGT20.Color, edge.lwd=0.4, #nodes vertex.col=&quot;grey90&quot;, vertex.cex=0.8, #labels displaylabels=T, label.pos=1, label.cex=.7) #dev.off() 7.6.3 MDS on geodesic distances KHA&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Advice.csv&quot;, stringsAsFactors=FALSE, row.names=1)) KHAS&lt;-KHA*t(KHA) KHASn&lt;-as.network(KHAS, directed=F) GeoD&lt;-geodist(KHASn) max(GeoD$gdist) ## [1] 3 #GeoD$gdist[GeoD$counts==0]&lt;--999 #GeoD$gdist[GeoD$gdist==-999]&lt;-max(GeoD$gdist) GeoD_Coord&lt;-cmdscale(GeoD$gdist, eig=TRUE, k=2) GeoD_Coord ## $points ## [,1] [,2] ## [1,] 0.76162888 -0.15192804 ## [2,] -1.51428017 0.01452473 ## [3,] 0.06243284 -0.53328907 ## [4,] 0.02556773 -0.89875609 ## [5,] 1.13565391 0.34041487 ## [6,] -1.25508843 -0.97588178 ## [7,] -0.74784913 0.81617695 ## [8,] 0.06471364 -0.77547617 ## [9,] 0.85297735 0.24843971 ## [10,] 1.07052904 -0.29602193 ## [11,] -1.29460998 1.71553243 ## [12,] -1.51428017 0.01452473 ## [13,] 0.95428481 0.34017104 ## [14,] -0.29225683 0.53688623 ## [15,] 1.05597933 0.13644745 ## [16,] 1.01641735 0.12773099 ## [17,] -1.23959938 -0.42884357 ## [18,] 0.37975961 0.20110852 ## [19,] 1.14398272 0.29717063 ## [20,] 0.06113491 -0.41675189 ## [21,] -0.72709801 -0.31217975 ## ## $eig ## [1] 1.881496e+01 7.566499e+00 5.471410e+00 3.744726e+00 3.436953e+00 ## [6] 2.613479e+00 2.377477e+00 2.000000e+00 2.000000e+00 2.000000e+00 ## [11] 1.109910e+00 7.348856e-01 5.306488e-01 1.185842e-01 2.664535e-15 ## [16] -1.212696e-01 -2.706349e-01 -6.477894e-01 -1.307601e+00 -2.646835e+00 ## [21] -3.715879e+00 ## ## $x ## NULL ## ## $ac ## [1] 0 ## ## $GOF ## [1] 0.4308616 0.5023171 #tiff(file=&quot;images/Fig_09_GeoDKHA_MDS.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(1,1,1,1)) gplot(KHASn, gmode=&quot;graph&quot;, #layout coord=GeoD_Coord$points, jitter=T, #ties edge.col=&quot;grey50&quot;, edge.lwd=.7, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.cex=.7) #dev.off() 7.7 KamadaKawai and FR layout KHFS 7.7.1 On Simulated data mat8&lt;-matrix(c(0),8,8) mat8[1,2]&lt;-1 mat8[2,3]&lt;-1 mat8[3,4]&lt;-1 mat8[3,5]&lt;-1 mat8[3,6]&lt;-1 mat8[4,5]&lt;-1 mat8[4,6]&lt;-1 mat8[5,6]&lt;-1 mat8[6,7]&lt;-1 mat8[7,8]&lt;-1 mat8s&lt;-(mat8+t(mat8))&gt;0 mat8s ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] ## [1,] FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE ## [2,] TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE ## [3,] FALSE TRUE FALSE TRUE TRUE TRUE FALSE FALSE ## [4,] FALSE FALSE TRUE FALSE TRUE TRUE FALSE FALSE ## [5,] FALSE FALSE TRUE TRUE FALSE TRUE FALSE FALSE ## [6,] FALSE FALSE TRUE TRUE TRUE FALSE TRUE FALSE ## [7,] FALSE FALSE FALSE FALSE FALSE TRUE FALSE TRUE ## [8,] FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE gplot(mat8, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=FALSE, #ties edge.col=&quot;grey70&quot;, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) gplot(mat8, gmode=&quot;graph&quot;, #layout mode=&quot;kamadakawai&quot;, jitter=FALSE, #ties edge.col=&quot;grey70&quot;, #nodes vertex.col=&quot;cornflowerblue&quot;, #labels displaylabels=T, label.pos=1, label.cex=.7) 7.7.2 Scientists collaborations BS504Cx&lt;-as.matrix(read.csv(&quot;Datasets/Borgatti_Scientists504_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1)) BS504C&lt;-(BS504Cx&gt;3) #tiff(file=&quot;images/Fig_011b_BS504C_KK.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(BS504C, gmode=&quot;graph&quot;, #layout mode=&quot;kamadakawai&quot;, jitter=F, #ties edge.col=&quot;grey70&quot;, edge.lwd=.1, #nodes vertex.col=&quot;cornflowerblue&quot;, vertex.cex=.75) #dev.off() 7.7.3 Nodal attributes on KHF KHF&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Friendship.csv&quot;, stringsAsFactors=FALSE, row.names=1)) KHFS&lt;-KHF*t(KHF) KHAttr&lt;-read.csv(&quot;Datasets/Krackhardt_HighTech_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1) table(KHAttr$TENURE) ## ## 0.25 3.332999945 4.666999817 4.833000183 5.416999817 7.5 ## 1 1 1 1 1 1 ## 8.416999817 8.916999817 9.083000183 9.25 9.333000183 10.41699982 ## 1 1 1 1 1 1 ## 11.33300018 11.66699982 12.41699982 12.5 12.75 19.58300018 ## 1 1 1 1 1 1 ## 27 28 30 ## 1 1 1 #tiff(file=&quot;images/Fig_011_KHF_LEVELTENURE.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(1,1,1,1)) gplot(KHFS, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=F, #ties edge.col=&quot;grey30&quot;, edge.lwd=.4, #nodes vertex.col=&quot;cornflowerblue&quot;, vertex.cex=KHAttr$TENURE/20+.8, #labels displaylabels=TRUE, label.cex=.7) #dev.off() # type sides of nodes KHF&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Friendship.csv&quot;, stringsAsFactors=FALSE, row.names=1)) KHFS&lt;-KHF*t(KHF) KHAttr$AGE ## [1] 33 42 40 33 32 59 55 34 62 37 46 34 48 43 40 27 30 33 32 38 36 KHAttr&lt;-read.csv(&quot;Datasets/Krackhardt_HighTech_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1) #tiff(file=&quot;images/Fig_013_KHF_DEPARTMENT.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(2,2,2,2)) gplot(KHFS, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=F, #ties edge.col=&quot;grey30&quot;, edge.lwd=.4, #nodes vertex.col=(KHAttr$LEVEL==1)*1+(KHAttr$LEVEL==2)*7+(KHAttr$LEVEL==3)*0, # Define symbols vertex.sides=((KHAttr$LEVEL==1)*3+(KHAttr$LEVEL==2)*4+(KHAttr$LEVEL==3)*20), vertex.cex=.8+KHAttr$TENURE/25, #labels displaylabels=TRUE, label.cex=.7) #dev.off() 7.7.4 Scientists collaboration (more complex) # Gender and tenure with legend BS504Cx&lt;-as.matrix(read.csv(&quot;Datasets/Borgatti_Scientists504_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1)) BS504C&lt;-(BS504Cx&gt;3) BS504Attr&lt;-read.csv(&quot;Datasets/Borgatti_Scientists504_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1) Tenure&lt;-(BS504Attr$Years) Tenure ## [1] 18 2 1 16 2 14 4 2 6 3 22 34 25 7 8 5 4 47 21 9 2 15 3 2 13 ## [26] 2 16 3 8 27 4 5 5 3 29 26 7 4 21 28 2 1 14 18 12 15 14 10 29 6 ## [51] 10 3 8 6 3 5 4 28 24 6 2 18 1 14 12 14 11 4 22 3 7 9 24 5 9 ## [76] 27 5 4 25 9 28 3 2 17 14 14 3 6 2 2 6 25 40 5 4 22 8 27 4 4 ## [101] 2 17 17 2 16 25 4 21 4 28 3 8 25 28 4 27 18 2 16 14 17 12 2 14 32 ## [126] 23 4 29 21 4 7 25 4 28 11 12 12 4 8 16 8 8 29 3 4 29 4 4 5 3 ## [151] 3 2 19 14 6 13 9 7 16 3 15 6 3 3 30 30 4 10 5 6 2 15 15 16 2 ## [176] 4 3 2 5 32 3 6 35 3 7 22 35 5 24 39 2 2 2 17 2 17 13 17 4 7 ## [201] 3 2 13 1 15 21 3 7 8 3 3 13 17 1 16 3 12 14 3 8 4 10 3 26 3 ## [226] 22 8 5 27 7 3 6 46 23 9 3 2 3 17 14 1 13 2 14 1 1 3 23 3 10 ## [251] 29 9 4 37 2 18 1 1 19 14 11 5 4 24 4 10 37 24 10 40 22 3 2 12 13 ## [276] 17 13 2 6 9 31 28 3 3 44 3 24 27 9 3 18 18 17 18 13 1 31 6 4 3 ## [301] 4 4 27 22 29 24 9 3 2 2 17 13 14 14 17 7 27 10 27 5 3 40 7 30 24 ## [326] 25 24 17 11 5 14 2 36 7 4 23 22 24 37 8 11 4 3 8 10 3 12 2 4 12 ## [351] 14 12 15 12 14 12 5 29 33 4 3 3 4 47 34 53 11 2 8 13 11 8 22 6 44 ## [376] 5 3 4 4 8 6 3 3 2 19 1 5 2 12 2 2 1 3 25 3 4 10 24 28 10 ## [401] 5 7 3 6 9 3 2 12 14 11 3 14 2 2 14 3 2 4 33 7 4 4 4 13 1 ## [426] 19 1 3 19 11 14 16 6 4 28 4 5 10 24 22 3 3 4 8 3 25 30 12 2 14 ## [451] 40 4 4 30 23 27 8 20 13 18 16 17 2 2 11 4 1 25 10 6 26 28 3 43 39 ## [476] 6 41 34 3 4 5 13 2 16 13 3 17 2 10 16 15 1 1 2 3 5 30 4 5 21 ## [501] 4 3 7 3 TenureA&lt;-(round(10*(Tenure)/max((Tenure)))) TenureA ## [1] 3 0 0 3 0 3 1 0 1 1 4 6 5 1 2 1 1 9 4 2 0 3 1 0 2 ## [26] 0 3 1 2 5 1 1 1 1 5 5 1 1 4 5 0 0 3 3 2 3 3 2 5 1 ## [51] 2 1 2 1 1 1 1 5 5 1 0 3 0 3 2 3 2 1 4 1 1 2 5 1 2 ## [76] 5 1 1 5 2 5 1 0 3 3 3 1 1 0 0 1 5 8 1 1 4 2 5 1 1 ## [101] 0 3 3 0 3 5 1 4 1 5 1 2 5 5 1 5 3 0 3 3 3 2 0 3 6 ## [126] 4 1 5 4 1 1 5 1 5 2 2 2 1 2 3 2 2 5 1 1 5 1 1 1 1 ## [151] 1 0 4 3 1 2 2 1 3 1 3 1 1 1 6 6 1 2 1 1 0 3 3 3 0 ## [176] 1 1 0 1 6 1 1 7 1 1 4 7 1 5 7 0 0 0 3 0 3 2 3 1 1 ## [201] 1 0 2 0 3 4 1 1 2 1 1 2 3 0 3 1 2 3 1 2 1 2 1 5 1 ## [226] 4 2 1 5 1 1 1 9 4 2 1 0 1 3 3 0 2 0 3 0 0 1 4 1 2 ## [251] 5 2 1 7 0 3 0 0 4 3 2 1 1 5 1 2 7 5 2 8 4 1 0 2 2 ## [276] 3 2 0 1 2 6 5 1 1 8 1 5 5 2 1 3 3 3 3 2 0 6 1 1 1 ## [301] 1 1 5 4 5 5 2 1 0 0 3 2 3 3 3 1 5 2 5 1 1 8 1 6 5 ## [326] 5 5 3 2 1 3 0 7 1 1 4 4 5 7 2 2 1 1 2 2 1 2 0 1 2 ## [351] 3 2 3 2 3 2 1 5 6 1 1 1 1 9 6 10 2 0 2 2 2 2 4 1 8 ## [376] 1 1 1 1 2 1 1 1 0 4 0 1 0 2 0 0 0 1 5 1 1 2 5 5 2 ## [401] 1 1 1 1 2 1 0 2 3 2 1 3 0 0 3 1 0 1 6 1 1 1 1 2 0 ## [426] 4 0 1 4 2 3 3 1 1 5 1 1 2 5 4 1 1 1 2 1 5 6 2 0 3 ## [451] 8 1 1 6 4 5 2 4 2 3 3 3 0 0 2 1 0 5 2 1 5 5 1 8 7 ## [476] 1 8 6 1 1 1 2 0 3 2 1 3 0 2 3 3 0 0 0 1 1 6 1 1 4 ## [501] 1 1 1 1 colfunc &lt;- colorRampPalette(c(&quot;yellow&quot;, &quot;green3&quot;)) COLWB&lt;-colfunc(7) TenureA2&lt;-TenureA TenureA2[TenureA==0]&lt;-COLWB[1] TenureA2[TenureA==1]&lt;-COLWB[2] TenureA2[TenureA==2]&lt;-COLWB[3] TenureA2[TenureA==3]&lt;-COLWB[4] TenureA2[TenureA==4]&lt;-COLWB[5] TenureA2[TenureA==5]&lt;-COLWB[6] TenureA2[TenureA==6]&lt;-COLWB[6] TenureA2[TenureA==7]&lt;-COLWB[7] TenureA2[TenureA==8]&lt;-COLWB[7] TenureA2[TenureA==9]&lt;-COLWB[7] TenureA2[TenureA==10]&lt;-COLWB[7] TenureA2 ## [1] &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; ## [8] &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; ## [15] &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#00CD00&quot; &quot;#55DD00&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; ## [22] &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; ## [29] &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; ## [36] &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#2AD500&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; ## [43] &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; ## [50] &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [57] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; ## [64] &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; ## [71] &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; ## [78] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; ## [85] &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; ## [92] &quot;#2AD500&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; ## [99] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; ## [106] &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; ## [113] &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; ## [120] &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#2AD500&quot; &quot;#55DD00&quot; ## [127] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; ## [134] &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; ## [141] &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; ## [148] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#55DD00&quot; &quot;#7FE600&quot; ## [155] &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#7FE600&quot; ## [162] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; ## [169] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; ## [176] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [183] &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; ## [190] &quot;#00CD00&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; ## [197] &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; ## [204] &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; ## [211] &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; ## [218] &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; ## [225] &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [232] &quot;#D4F600&quot; &quot;#00CD00&quot; &quot;#55DD00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; ## [239] &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; ## [246] &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; ## [253] &quot;#D4F600&quot; &quot;#00CD00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#55DD00&quot; ## [260] &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; ## [267] &quot;#00CD00&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#00CD00&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; ## [274] &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; ## [281] &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; ## [288] &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; ## [295] &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [302] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#55DD00&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; ## [309] &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; ## [316] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#00CD00&quot; ## [323] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; ## [330] &quot;#D4F600&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; ## [337] &quot;#55DD00&quot; &quot;#2AD500&quot; &quot;#00CD00&quot; &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [344] &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; ## [351] &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; ## [358] &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#00CD00&quot; ## [365] &quot;#2AD500&quot; &quot;#00CD00&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#AAEE00&quot; &quot;#AAEE00&quot; ## [372] &quot;#AAEE00&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [379] &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#55DD00&quot; ## [386] &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; ## [393] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; ## [400] &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; ## [407] &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; ## [414] &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; ## [421] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; &quot;#55DD00&quot; &quot;#FFFF00&quot; ## [428] &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; ## [435] &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#2AD500&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; ## [442] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; ## [449] &quot;#FFFF00&quot; &quot;#7FE600&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#55DD00&quot; ## [456] &quot;#2AD500&quot; &quot;#AAEE00&quot; &quot;#55DD00&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; &quot;#7FE600&quot; ## [463] &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#FFFF00&quot; &quot;#2AD500&quot; &quot;#AAEE00&quot; ## [470] &quot;#D4F600&quot; &quot;#2AD500&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#00CD00&quot; &quot;#00CD00&quot; &quot;#D4F600&quot; ## [477] &quot;#00CD00&quot; &quot;#2AD500&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#AAEE00&quot; &quot;#FFFF00&quot; ## [484] &quot;#7FE600&quot; &quot;#AAEE00&quot; &quot;#D4F600&quot; &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#AAEE00&quot; &quot;#7FE600&quot; ## [491] &quot;#7FE600&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#FFFF00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#2AD500&quot; ## [498] &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#55DD00&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; &quot;#D4F600&quot; #tiff(file=&quot;images/Fig_014_BS504C_gender_tenure.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(BS504C, gmode=&quot;graph&quot;, #layout #mode=&quot;kamadakawai&quot;, jitter = F, #ties edge.col=&quot;grey80&quot;, edge.lwd=.2, #nodes vertex.col=TenureA2, vertex.cex=1+.7*(2-BS504Attr$Sex), vertex.sides=(BS504Attr$Sex-1)*47+4) legend(&quot;topright&quot;, legend = c(&quot;Colors&quot;,&quot; Senior&quot;, &quot; Junior&quot;, &quot; &quot;,&quot;Shapes&quot;, &quot; Male (2)&quot;, &quot; Female (1)&quot;), col = c(&quot;white&quot;,&quot;yellow&quot;,&quot;green3&quot;,&quot;white&quot;,&quot;white&quot;,&quot;black&quot;,&quot;black&quot;), bty = &quot;n&quot;, pch =c(19,19,19,19,19,19,18), pt.cex = c(0,2.1,2.1,0,0,1.7,1.9), cex = 1, text.col = &quot;grey10&quot;, horiz = F , inset = c(0.01)) #dev.off() 7.7.5 Nodal attributes on PFM === NO DATASET === PFM&lt;-as.matrix(read.csv(&quot;Datasets/Padgett_FlorentineFamilies_Marriage.csv&quot;, stringsAsFactors=FALSE, row.names=1)) PFM ## ACCIAIUOLI ALBIZZI BARBADORI BISCHERI CASTELLANI GINORI GUADAGNI ## ACCIAIUOLI 0 0 0 0 0 0 0 ## ALBIZZI 0 0 0 0 0 1 1 ## BARBADORI 0 0 0 0 1 0 0 ## BISCHERI 0 0 0 0 0 0 1 ## CASTELLANI 0 0 1 0 0 0 0 ## GINORI 0 1 0 0 0 0 0 ## GUADAGNI 0 1 0 1 0 0 0 ## LAMBERTESCHI 0 0 0 0 0 0 1 ## MEDICI 1 1 1 0 0 0 0 ## PAZZI 0 0 0 0 0 0 0 ## PERUZZI 0 0 0 1 1 0 0 ## PUCCI 0 0 0 0 0 0 0 ## RIDOLFI 0 0 0 0 0 0 0 ## SALVIATI 0 0 0 0 0 0 0 ## STROZZI 0 0 0 1 1 0 0 ## TORNABUONI 0 0 0 0 0 0 1 ## LAMBERTESCHI MEDICI PAZZI PERUZZI PUCCI RIDOLFI SALVIATI STROZZI ## ACCIAIUOLI 0 1 0 0 0 0 0 0 ## ALBIZZI 0 1 0 0 0 0 0 0 ## BARBADORI 0 1 0 0 0 0 0 0 ## BISCHERI 0 0 0 1 0 0 0 1 ## CASTELLANI 0 0 0 1 0 0 0 1 ## GINORI 0 0 0 0 0 0 0 0 ## GUADAGNI 1 0 0 0 0 0 0 0 ## LAMBERTESCHI 0 0 0 0 0 0 0 0 ## MEDICI 0 0 0 0 0 1 1 0 ## PAZZI 0 0 0 0 0 0 1 0 ## PERUZZI 0 0 0 0 0 0 0 1 ## PUCCI 0 0 0 0 0 0 0 0 ## RIDOLFI 0 1 0 0 0 0 0 1 ## SALVIATI 0 1 1 0 0 0 0 0 ## STROZZI 0 0 0 1 0 1 0 0 ## TORNABUONI 0 1 0 0 0 1 0 0 ## TORNABUONI ## ACCIAIUOLI 0 ## ALBIZZI 0 ## BARBADORI 0 ## BISCHERI 0 ## CASTELLANI 0 ## GINORI 0 ## GUADAGNI 1 ## LAMBERTESCHI 0 ## MEDICI 1 ## PAZZI 0 ## PERUZZI 0 ## PUCCI 0 ## RIDOLFI 1 ## SALVIATI 0 ## STROZZI 0 ## TORNABUONI 0 library(sna) PFMn&lt;-as.network(PFM, directed=F) DPFM&lt;-sna::degree(PFMn) #tiff(file=&quot;images/Fig_015_PFM_labelsCHANGE.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(PFMn, gmode=&quot;graph&quot;, #layout jitter=F, #ties edge.col=&quot;grey70&quot;, edge.lwd=.1, #nodes vertex.col=&quot;deepskyblue3&quot;, vertex.cex=DPFM/17+.5, #labels displaylabels=TRUE, label.pos=3, label.cex=DPFM/20+.3, vertex.border=&quot;white&quot;) #dev.off() 7.8 Tie strength on Scientists collaborations BS504C&lt;-as.matrix(read.csv(&quot;Datasets/Borgatti_Scientists504_Attributes.csv&quot;, stringsAsFactors=FALSE, row.names=1)) BS504CGT3&lt;-(BS504Cx&gt;3) BS504CGT5&lt;-(BS504Cx&gt;5) BS504CGT7&lt;-(BS504Cx&gt;7) BS504CGT9&lt;-(BS504Cx&gt;9) LOBS504&lt;-gplot(BS504CGT3, gmode=&quot;graph&quot;, #layout mode=&quot;fruchtermanreingold&quot;, jitter=F, #ties edge.col=&quot;grey70&quot;, edge.lwd=.1, #nodes vertex.col=&quot;gold3&quot;, vertex.cex=.75) #tiff(file=&quot;images/Fig_016_BS504C_TieStrenght3.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(BS504CGT3, gmode=&quot;graph&quot;, #layout coord=LOBS504, jitter=F, #ties edge.col=&quot;grey60&quot;, edge.lwd=.1, #nodes vertex.col=&quot;gold3&quot;, vertex.cex=.75) #dev.off() #tiff(file=&quot;images/Fig_016_BS504C_TieStrenght5.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(BS504CGT5, gmode=&quot;graph&quot;, #layout coord=LOBS504, jitter=F, #ties edge.col=&quot;grey60&quot;, edge.lwd=.1, #nodes vertex.col=&quot;gold3&quot;, vertex.cex=.75) #dev.off() #tiff(file=&quot;images/Fig_016_BS504C_TieStrenght7.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(BS504CGT7, gmode=&quot;graph&quot;, #layout coord=LOBS504, jitter=F, #ties edge.col=&quot;grey60&quot;, edge.lwd=.1, #nodes vertex.col=&quot;gold3&quot;, vertex.cex=.75) #dev.off() #tiff(file=&quot;images/Fig_016_BS504C_TieStrenght9.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) par(mar=c(0,0,0,0)) gplot(BS504CGT9, gmode=&quot;graph&quot;, #layout coord=LOBS504, jitter=F, #ties edge.col=&quot;grey60&quot;, edge.lwd=.1, #nodes vertex.col=&quot;gold3&quot;, vertex.cex=.75) #dev.off() 7.9 Directed networks KHF&lt;-as.matrix(read.csv(&quot;Datasets/Krackhardt_HighTech_Friendship.csv&quot;, stringsAsFactors=FALSE, row.names=1)) KHFn&lt;-as.network(KHF, directed=T) COOKHF&lt;-gplot(KHFn, gmode=&quot;digraph&quot;, #layout jitter=F, # do not allow nodes to be &quot;jittered&quot; #ties edge.col=&quot;grey40&quot;, arrowhead.cex=.7, # set color of ties #nodes vertex.col=&quot;grey90&quot;, # set color of nodes vertex.cex=1.4, #labels displaylabels=T, # indicate that labels should be included label.pos=5, # indicate that labels should be given below points label.cex=.5) # indicate the size of the labels (1 is default) #tiff(file=&quot;images/Fig_017b_KHF_directed.tiff&quot;, width=7, height=5, units=&quot;in&quot;, res=900) # this defines the margins: par(mar=c(0,0,0,0)) # this is the plot for a network function in &quot;sna&quot; gplot(KHFn, gmode=&quot;digraph&quot;, coord=COOKHF, #layout jitter=F, # do not allow nodes to be &quot;jittered&quot; #ties edge.col=&quot;grey30&quot;, edge.lwd=1, usecurve=T, edge.curve=.04, arrowhead.cex=.6, #nodes vertex.col=&quot;grey90&quot;, # set color of nodes vertex.cex=1.4, #labels displaylabels=T, # indicate that labels should be included label.pos=5, # indicate that labels should be given below points label.cex=.5) # indicate the size of the labels (1 is default) #dev.off() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
